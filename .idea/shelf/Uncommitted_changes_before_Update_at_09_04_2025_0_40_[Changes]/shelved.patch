Index: app/src/main/res/menu/bottom_navigation_menuj.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n<item\n    android:id=\"@+id/home\"\n    android:title=\"Home\"\n    android:icon=\"@drawable/home_icon\"/>\n    <item\n        android:id=\"@+id/events\"\n        android:title=\"Events\"\n        android:icon=\"@drawable/events_icon\"/>\n    <item\n        android:id=\"@+id/favourite\"\n        android:title=\"Study\"\n        android:icon=\"@drawable/study\"/>\n    <item\n        android:id=\"@+id/plus\"\n        android:title=\"Chats\"\n        android:icon=\"@drawable/message\"/>\n    <item\n        android:id=\"@+id/profile\"\n        android:title=\"Profile\"\n        android:icon=\"@drawable/profile_icon\"/>\n</menu>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/bottom_navigation_menuj.xml b/app/src/main/res/menu/bottom_navigation_menuj.xml
--- a/app/src/main/res/menu/bottom_navigation_menuj.xml	(revision f78795d8c907eb313505e2d7597f175dc7b0ab1b)
+++ b/app/src/main/res/menu/bottom_navigation_menuj.xml	(date 1744121368878)
@@ -2,22 +2,22 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android">
 <item
     android:id="@+id/home"
-    android:title="Home"
-    android:icon="@drawable/home_icon"/>
+    android:title="Карты"
+    android:icon="@drawable/map"/>
     <item
         android:id="@+id/events"
-        android:title="Events"
+        android:title="Ивенты"
         android:icon="@drawable/events_icon"/>
     <item
-        android:id="@+id/favourite"
-        android:title="Study"
+        android:id="@+id/plus"
+        android:title="Обучение"
         android:icon="@drawable/study"/>
     <item
-        android:id="@+id/plus"
-        android:title="Chats"
-        android:icon="@drawable/message"/>
+        android:id="@+id/favourite"
+        android:title="Маршруты"
+        android:icon="@drawable/distance"/>
     <item
         android:id="@+id/profile"
-        android:title="Profile"
+        android:title="Профиль"
         android:icon="@drawable/profile_icon"/>
 </menu>
\ No newline at end of file
Index: app/src/main/java/com/example/main_screen/RegisterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.main_screen;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.example.main_screen.bottomnav.profile.ProfileFragment;\nimport com.example.main_screen.databinding.ActivityRegisterBinding;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.auth.AuthResult;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\n\nimport java.util.HashMap;\n\nimport com.example.main_screen.MainActivity;\n\npublic class RegisterActivity extends AppCompatActivity {\n    public FirebaseDatabase database;\n    public DatabaseReference reference;\n\n\n    private ActivityRegisterBinding binding;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        database = FirebaseDatabase.getInstance();\n        reference = database.getReference();\n        binding = ActivityRegisterBinding.inflate(getLayoutInflater());\n        binding.minibackBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                startActivity(new Intent(RegisterActivity.this, LoginActivity.class));\n            }\n        });\n\n        setContentView(binding.getRoot());\n\n        binding.btnSign.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (binding.emailEt.getText().toString().isEmpty() || binding.loginEt.getText().toString().isEmpty()\n                        || binding.passwordEt.getText().toString().isEmpty()){\n                    Toast.makeText(getApplicationContext(), \"Fields cannot be empty\", Toast.LENGTH_SHORT).show();\n                }else{\n                    FirebaseAuth.getInstance().createUserWithEmailAndPassword(binding.emailEt.getText().toString(), binding.passwordEt.getText().toString())\n                            .addOnCompleteListener(new OnCompleteListener<AuthResult>() {\n                                @Override\n                                public void onComplete(@NonNull Task<AuthResult> task) {\n                                    if (task.isSuccessful()){\n                                        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\n                                        DatabaseReference userRef = FirebaseDatabase.getInstance().getReference().child(\"Users\").child(currentUser.getUid());\n                                        userRef.child(\"username\").setValue(binding.loginEt.getText().toString());\n                                        userRef.child(\"profileImage\").setValue(\"\");\n                                        userRef.child(\"email\").setValue(binding.emailEt.getText().toString());\n                                        userRef.child(\"password\").setValue(binding.passwordEt.getText().toString());\n                                        userRef.child(\"postText\").setValue(\"\");\n                                        userRef.child(\"postNameText\").setValue(\"\");\n                                        userRef.child(\"postImages\").setValue(\"\");\n                                        DatabaseReference userReviews = FirebaseDatabase.getInstance().getReference().child(\"Reviews\");\n                                        userReviews.child(\"Cinema\").child(\"Master_and_Margarita\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Cinema\").child(\"Led_3\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Cinema\").child(\"Onegin\").child(currentUser.getUid()).child(\"lovest\") .setValue(0);\n                                        userReviews.child(\"Theater\").child(\"Rus_dram\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Theater\").child(\"Axion\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Theater\").child(\"Udm_national\").child(currentUser.getUid()).child(\"lovest\") .setValue(0);\n                                        userReviews.child(\"Park\").child(\"Gorkogo\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Park\").child(\"Kosmonavtov\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Park\").child(\"Kirova\").child(currentUser.getUid()).child(\"lovest\") .setValue(0);\n                                        userReviews.child(\"Restaraunt\").child(\"Panorama\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Restaraunt\").child(\"Penthouse\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Restaraunt\").child(\"Kare\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Museum\").child(\"Izhmash\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Museum\").child(\"Pochta_UR\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        userReviews.child(\"Museum\").child(\"Motomuseum\").child(currentUser.getUid()).child(\"lovest\").setValue(0);\n                                        startActivity(new Intent(RegisterActivity.this, Category.class));\n                                    }else{\n                                        Toast.makeText(RegisterActivity.this, \"You have some errors\", Toast.LENGTH_SHORT).show();\n                                    }\n                                }\n                            });\n\n                }\n            }\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/main_screen/RegisterActivity.java b/app/src/main/java/com/example/main_screen/RegisterActivity.java
--- a/app/src/main/java/com/example/main_screen/RegisterActivity.java	(revision f78795d8c907eb313505e2d7597f175dc7b0ab1b)
+++ b/app/src/main/java/com/example/main_screen/RegisterActivity.java	(date 1744141190658)
@@ -62,6 +62,7 @@
                                         userRef.child("profileImage").setValue("");
                                         userRef.child("email").setValue(binding.emailEt.getText().toString());
                                         userRef.child("password").setValue(binding.passwordEt.getText().toString());
+                                        userRef.child("category_user").setValue("");
                                         userRef.child("postText").setValue("");
                                         userRef.child("postNameText").setValue("");
                                         userRef.child("postImages").setValue("");
@@ -81,7 +82,7 @@
                                         userReviews.child("Museum").child("Izhmash").child(currentUser.getUid()).child("lovest").setValue(0);
                                         userReviews.child("Museum").child("Pochta_UR").child(currentUser.getUid()).child("lovest").setValue(0);
                                         userReviews.child("Museum").child("Motomuseum").child(currentUser.getUid()).child("lovest").setValue(0);
-                                        startActivity(new Intent(RegisterActivity.this, Category.class));
+                                        startActivity(new Intent(RegisterActivity.this, ChatActivity.class));
                                     }else{
                                         Toast.makeText(RegisterActivity.this, "You have some errors", Toast.LENGTH_SHORT).show();
                                     }
Index: app/src/main/java/com/example/main_screen/ChatActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.main_screen;\n\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport adapter.ChatAdapter;\nimport model.Message;\n\npublic class ChatActivity extends AppCompatActivity {\n\n    private RecyclerView recyclerView;\n    private ChatAdapter adapter;\n    private final List<Message> messages = new ArrayList<>();\n    private EditText inputField;\n    private ImageButton sendButton;\n    private final Handler handler = new Handler(Looper.getMainLooper());\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_chat);\n\n        recyclerView = findViewById(R.id.chat_recycler);\n        inputField = findViewById(R.id.enter);\n        sendButton = findViewById(R.id.send);\n\n        adapter = new ChatAdapter(messages);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        recyclerView.setAdapter(adapter);\n\n        sendButton.setOnClickListener(v -> {\n            String userMessage = inputField.getText().toString().trim();\n            if (!userMessage.isEmpty()) {\n                addMessage(userMessage, Message.TYPE_USER);\n                inputField.setText(\"\");\n                sendToBot(userMessage);\n            }\n        });\n    }\n\n    private void addMessage(String message, int type) {\n        messages.add(new Message(message, type));\n        adapter.notifyItemInserted(messages.size() - 1);\n        recyclerView.scrollToPosition(messages.size() - 1);\n    }\n\n    private void sendToBot(String prompt) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        executor.execute(() -> {\n            String response = chatGPT(prompt);\n            handler.post(() -> addMessage(response, Message.TYPE_BOT));\n        });\n    }\n\n    private String chatGPT(String prompt) {\n        try {\n            String apiUrl = \"https://api.naga.ac/v1/chat/completions\";\n            String apiKey = \"ng-O5o7GnOt9AqR1rjknX08P3m6blgXs\";\n            String model = \"gpt-3.5-turbo\";\n\n            URL url = new URL(apiUrl);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Authorization\", \"Bearer \" + apiKey);\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setDoOutput(true);\n\n            String body = \"{\\\"model\\\": \\\"\" + model + \"\\\", \\\"messages\\\": [{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"\" + prompt + \"\\\"}]}\";\n\n            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());\n            writer.write(body);\n            writer.flush();\n            writer.close();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                result.append(line);\n            }\n\n            JSONObject responseJson = new JSONObject(result.toString());\n            JSONArray choices = responseJson.getJSONArray(\"choices\");\n            JSONObject messageObj = choices.getJSONObject(0).getJSONObject(\"message\");\n\n            return messageObj.getString(\"content\").trim();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"Ошибка при подключении к серверу.\";\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/main_screen/ChatActivity.java b/app/src/main/java/com/example/main_screen/ChatActivity.java
--- a/app/src/main/java/com/example/main_screen/ChatActivity.java	(revision f78795d8c907eb313505e2d7597f175dc7b0ab1b)
+++ b/app/src/main/java/com/example/main_screen/ChatActivity.java	(date 1744147228630)
@@ -10,11 +10,13 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
-
-import org.json.JSONArray;
-import org.json.JSONObject;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.DatabaseReference;
 
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
@@ -30,11 +32,21 @@
 public class ChatActivity extends AppCompatActivity {
 
     private RecyclerView recyclerView;
-    private ChatAdapter adapter;
-    private final List<Message> messages = new ArrayList<>();
-    private EditText inputField;
+    private EditText editText;
     private ImageButton sendButton;
-    private final Handler handler = new Handler(Looper.getMainLooper());
+    private ChatAdapter adapter;
+    private List<Message> messages = new ArrayList<>();
+    private Handler handler;
+    private int currentStep = 0;
+    private final List<String> userAnswers = new ArrayList<>();
+    private FirebaseAuth mAuth;
+    private DatabaseReference userRef;
+
+    private final String[] questions = {
+            "1️⃣ Что тебе больше по душе?\nРешать логические задачи\nПридумывать и рисовать\nУзнавать о прошлом",
+            "2️⃣ Какой отдых тебе ближе?\nИграть в стратегии или собирать схемы\nСмотреть фильмы, рисовать, писать\nЧитать исторические книги или посещать музеи",
+            "3️⃣ С кем бы ты хотел встретиться?\nС инженером из будущего\nС режиссёром или художником\nС историком или археологом"
+    };
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -42,72 +54,128 @@
         setContentView(R.layout.activity_chat);
 
         recyclerView = findViewById(R.id.chat_recycler);
-        inputField = findViewById(R.id.enter);
+        editText = findViewById(R.id.enter);
         sendButton = findViewById(R.id.send);
-
+        handler = new Handler(Looper.getMainLooper());
         adapter = new ChatAdapter(messages);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
         recyclerView.setAdapter(adapter);
 
+        // Firebase init
+        mAuth = FirebaseAuth.getInstance();
+        FirebaseUser currentUser = mAuth.getCurrentUser();
+        if (currentUser != null) {
+            userRef = FirebaseDatabase.getInstance().getReference().child("Users").child(currentUser.getUid());
+        }
+
+        addBotMessage("👋 Привет! Я твой культурный навигатор. Ответь на три коротких вопроса, чтобы я понял, что тебе интересно. Отвечай полноценными ответами.");
+        askNextQuestion();
+
         sendButton.setOnClickListener(v -> {
-            String userMessage = inputField.getText().toString().trim();
+            String userMessage = editText.getText().toString().trim();
             if (!userMessage.isEmpty()) {
-                addMessage(userMessage, Message.TYPE_USER);
-                inputField.setText("");
-                sendToBot(userMessage);
+                addUserMessage(userMessage);
+                editText.setText("");
+                if (currentStep < questions.length) {
+                    userAnswers.add(userMessage);
+                    askNextQuestion();
+                } else if (currentStep == questions.length) {
+                    userAnswers.add(userMessage);
+                    askAIAndRespond(userAnswers);
+                    currentStep++;
+                }
             }
         });
     }
 
-    private void addMessage(String message, int type) {
-        messages.add(new Message(message, type));
+    private void askNextQuestion() {
+        if (currentStep < questions.length) {
+            addBotMessage(questions[currentStep]);
+            currentStep++;
+        }
+    }
+
+    private void addUserMessage(String message) {
+        messages.add(new Message(message, 0));
+        adapter.notifyItemInserted(messages.size() - 1);
+        recyclerView.scrollToPosition(messages.size() - 1);
+    }
+
+    private void addBotMessage(String message) {
+        messages.add(new Message(message, 1));
         adapter.notifyItemInserted(messages.size() - 1);
         recyclerView.scrollToPosition(messages.size() - 1);
     }
 
-    private void sendToBot(String prompt) {
+    private void askAIAndRespond(List<String> answers) {
+        String prompt = "На основе следующих ответов определи, к какой области склонен человек: IT, творчество или история. Напиши свой ответ одним словом. Ответы: " + answers;
         ExecutorService executor = Executors.newSingleThreadExecutor();
         executor.execute(() -> {
             String response = chatGPT(prompt);
-            handler.post(() -> addMessage(response, Message.TYPE_BOT));
+            handler.post(() -> {
+                addBotMessage(response);
+                saveUserCategory(response);
+            });
         });
     }
 
-    private String chatGPT(String prompt) {
-        try {
-            String apiUrl = "https://api.naga.ac/v1/chat/completions";
-            String apiKey = "ng-O5o7GnOt9AqR1rjknX08P3m6blgXs";
-            String model = "gpt-3.5-turbo";
+    private void saveUserCategory(String response) {
+        String category = "";
+
+        response = response.toLowerCase();
+        if (response.contains("it")) {
+            category = "IT";
+        } else if (response.contains("творч")) {
+            category = "Творчество";
+        } else if (response.contains("истор")) {
+            category = "История";
+        }
+
+        if (!category.isEmpty() && userRef != null) {
+            userRef.child("category_user").setValue(category);
+        }
+    }
+
+    public static String chatGPT(String prompt) {
+        String url = "https://api.naga.ac/v1/chat/completions";
+        String apiKey = "ng-O5o7GnOt9AqR1rjknX08P3m6blgXs";
+        String model = "gpt-3.5-turbo";
 
-            URL url = new URL(apiUrl);
-            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
-            conn.setRequestMethod("POST");
-            conn.setRequestProperty("Authorization", "Bearer " + apiKey);
-            conn.setRequestProperty("Content-Type", "application/json");
-            conn.setDoOutput(true);
+        try {
+            URL obj = new URL(url);
+            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();
+            connection.setRequestMethod("POST");
+            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
+            connection.setRequestProperty("Content-Type", "application/json");
 
             String body = "{\"model\": \"" + model + "\", \"messages\": [{\"role\": \"user\", \"content\": \"" + prompt + "\"}]}";
 
-            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
+            connection.setDoOutput(true);
+            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
             writer.write(body);
             writer.flush();
             writer.close();
 
-            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
-            StringBuilder result = new StringBuilder();
+            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+            StringBuilder response = new StringBuilder();
             String line;
-            while ((line = reader.readLine()) != null) {
-                result.append(line);
+
+            while ((line = br.readLine()) != null) {
+                response.append(line);
             }
+            br.close();
 
-            JSONObject responseJson = new JSONObject(result.toString());
-            JSONArray choices = responseJson.getJSONArray("choices");
-            JSONObject messageObj = choices.getJSONObject(0).getJSONObject("message");
+            return extractMessageFromJSONResponse(response.toString());
 
-            return messageObj.getString("content").trim();
-        } catch (Exception e) {
+        } catch (IOException e) {
             e.printStackTrace();
-            return "Ошибка при подключении к серверу.";
+            return "Большая нагрузка на сервер. Попробуйте еще раз через 30 секунд:)";
         }
     }
+
+    public static String extractMessageFromJSONResponse(String response) {
+        int start = response.indexOf("content") + 10;
+        int end = response.indexOf("\"", start);
+        return response.substring(start, end);
+    }
 }
