package com.example.main_screen;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.widget.EditText;
import android.widget.ImageButton;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.DatabaseReference;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.example.main_screen.adapter.ChatAdapter;
import com.example.main_screen.model.Message;

public class ChatActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private EditText editText;
    private ImageButton sendButton;
    private ChatAdapter adapter;
    private List<Message> messages = new ArrayList<>();
    private Handler handler;
    private int currentStep = 0;
    private final List<String> userAnswers = new ArrayList<>();
    private FirebaseAuth mAuth;
    private DatabaseReference userRef;

    private final String[] questions = {
            "1Ô∏è‚É£ –ß—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ –¥—É—à–µ?\n–†–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n–ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏ —Ä–∏—Å–æ–≤–∞—Ç—å\n–£–∑–Ω–∞–≤–∞—Ç—å –æ –ø—Ä–æ—à–ª–æ–º",
            "2Ô∏è‚É£ –ö–∞–∫–æ–π –æ—Ç–¥—ã—Ö —Ç–µ–±–µ –±–ª–∏–∂–µ?\n–ò–≥—Ä–∞—Ç—å –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ö–µ–º—ã\n–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã, —Ä–∏—Å–æ–≤–∞—Ç—å, –ø–∏—Å–∞—Ç—å\n–ß–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –ø–æ—Å–µ—â–∞—Ç—å –º—É–∑–µ–∏",
            "3Ô∏è‚É£ –° –∫–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è?\n–° –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –∏–∑ –±—É–¥—É—â–µ–≥–æ\n–° —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–º –∏–ª–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º\n–° –∏—Å—Ç–æ—Ä–∏–∫–æ–º –∏–ª–∏ –∞—Ä—Ö–µ–æ–ª–æ–≥–æ–º"
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);

        recyclerView = findViewById(R.id.chat_recycler);
        editText = findViewById(R.id.enter);
        sendButton = findViewById(R.id.send);
        handler = new Handler(Looper.getMainLooper());
        adapter = new ChatAdapter(messages);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapter);

        // Firebase init
        mAuth = FirebaseAuth.getInstance();
        FirebaseUser currentUser = mAuth.getCurrentUser();
        if (currentUser != null) {
            userRef = FirebaseDatabase.getInstance().getReference().child("Users").child(currentUser.getUid());
        }

        addBotMessage("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.");
        askNextQuestion();

        sendButton.setOnClickListener(v -> {
            String userMessage = editText.getText().toString().trim();
            if (!userMessage.isEmpty()) {
                addUserMessage(userMessage);
                editText.setText("");
                if (currentStep < questions.length) {
                    userAnswers.add(userMessage);
                    askNextQuestion();
                } else if (currentStep == questions.length) {
                    userAnswers.add(userMessage);
                    askAIAndRespond(userAnswers);
                    currentStep++;
                }
            }
        });
    }

    private void askNextQuestion() {
        if (currentStep < questions.length) {
            addBotMessage(questions[currentStep]);
            currentStep++;
        }
    }

    private void addUserMessage(String message) {
        messages.add(new Message(message, 0));
        adapter.notifyItemInserted(messages.size() - 1);
        recyclerView.scrollToPosition(messages.size() - 1);
    }

    private void addBotMessage(String message) {
        messages.add(new Message(message, 1));
        adapter.notifyItemInserted(messages.size() - 1);
        recyclerView.scrollToPosition(messages.size() - 1);
    }

    private void askAIAndRespond(List<String> answers) {
        String prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–∫–ª–æ–Ω–µ–Ω —á–µ–ª–æ–≤–µ–∫: IT, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—è. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. –û—Ç–≤–µ—Ç—ã: " + answers;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> {
            String response = chatGPT(prompt);
            handler.post(() -> {
                addBotMessage(response);
                saveUserCategory(response);
            });
        });
    }

    private void saveUserCategory(String response) {
        String category = "";

        response = response.toLowerCase();
        if (response.contains("it")) {
            category = "IT";
        } else if (response.contains("—Ç–≤–æ—Ä—á")) {
            category = "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ";
        } else if (response.contains("–∏—Å—Ç–æ—Ä")) {
            category = "–ò—Å—Ç–æ—Ä–∏—è";
        }

        if (!category.isEmpty() && userRef != null) {
            userRef.child("category_user").setValue(category);
        }
    }

    public static String chatGPT(String prompt) {
        String url = "https://api.naga.ac/v1/chat/completions";
        String apiKey = "ng-O5o7GnOt9AqR1rjknX08P3m6blgXs";
        String model = "gpt-3.5-turbo";

        try {
            URL obj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.setRequestProperty("Content-Type", "application/json");

            String body = "{\"model\": \"" + model + "\", \"messages\": [{\"role\": \"user\", \"content\": \"" + prompt + "\"}]}";

            connection.setDoOutput(true);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(body);
            writer.flush();
            writer.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            br.close();

            return extractMessageFromJSONResponse(response.toString());

        } catch (IOException e) {
            e.printStackTrace();
            return "–ë–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥:)";
        }
    }

    public static String extractMessageFromJSONResponse(String response) {
        int start = response.indexOf("content") + 10;
        int end = response.indexOf("\"", start);
        return response.substring(start, end);
    }
}
